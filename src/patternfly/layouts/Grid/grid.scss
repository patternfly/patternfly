$pf-l-grid--breakpoint-map: build-breakpoint-map();

// Grid base
.pf-l-grid {
  --pf-l-grid--m-gutter--GridGap: var(--pf-global--gutter);
  --pf-l-grid__item--GridColumnStart: auto;
  --pf-l-grid__item--GridColumnEnd: span 12;
  --pf-l-grid--Order--base: 0;
  --pf-l-grid--Order: var(--pf-l-grid--Order--base);

  display: grid;
  grid-template-columns: repeat(12, [col-start] 1fr);
  order: var(--pf-l-grid--Order);

  > *,
  .pf-l-grid__item {
    --pf-l-grid--Order: var(--pf-l-grid--Order--base);

    grid-column-start: var(--pf-l-grid__item--GridColumnStart);
    grid-column-end: var(--pf-l-grid__item--GridColumnEnd);
    order: var(--pf-l-grid--Order);
    min-width: 0;
    min-height: 0;
  }

  // stylelint-disable max-nesting-depth
  @each $breakpoint, $breakpoint-value in $pf-l-grid--breakpoint-map {
    $breakpoint-name: if($breakpoint != "base", -on-#{$breakpoint}, "");

    @include pf-apply-breakpoint($breakpoint, $pf-l-grid--breakpoint-map) {
      @for $col from 1 through 12 {
        &.pf-m-all-#{$col}-col#{$breakpoint-name} {
          > * {
            --pf-l-grid__item--GridColumnEnd: span #{$col};
          }
        }
      }

      @for $col from 1 through 12 {
        > .pf-m-#{$col}-col#{$breakpoint-name} {
          --pf-l-grid__item--GridColumnEnd: span #{$col};
        }
      }

      // generate column offset modfiers
      @for $col from 1 through 12 {
        > .pf-m-offset-#{$col}-col#{$breakpoint-name} {
          --pf-l-grid__item--GridColumnStart: col-start calc(#{$col} + 1);
        }
      }

      // generate row span modfiers
      @for $row from 1 through 12 {
        > .pf-m-#{$row}-row#{$breakpoint-name} {
          grid-row: span #{$row};
        }
      }
    }
  }
  // stylelint-enable

  &.pf-m-gutter {
    grid-gap: var(--pf-l-grid--m-gutter--GridGap);
  }
}
