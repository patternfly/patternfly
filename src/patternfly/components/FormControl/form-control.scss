.pf-c-form-control {
  // Component
  --pf-c-form-control--Color: var(--pf-global--Color--100);
  --pf-c-form-control--FontSize: var(--pf-global--FontSize--md);
  --pf-c-form-control--LineHeight: var(--pf-global--LineHeight--md);
  --pf-c-form-control--BorderWidth: var(--pf-global--BorderWidth--sm);
  --pf-c-form-control--BorderTopColor: var(--pf-global--BorderColor--300);
  --pf-c-form-control--BorderRightColor: var(--pf-global--BorderColor--300);
  --pf-c-form-control--BorderBottomColor: var(--pf-global--BorderColor--200);
  --pf-c-form-control--BorderLeftColor: var(--pf-global--BorderColor--300);
  --pf-c-form-control--BorderRadius: 0;
  --pf-c-form-control--BackgroundColor: var(--pf-global--BackgroundColor--100);
  --pf-c-form-control--Width: 100%;
  --pf-c-form-control--Height: calc(var(--pf-c-form-control--FontSize) * var(--pf-c-form-control--LineHeight) + var(--pf-c-form-control--BorderWidth) * 2 + var(--pf-c-form-control--PaddingTop) + var(--pf-c-form-control--PaddingBottom)); // Needed for various browsers that compute height of form elements differently

  // padding
  // Note for top/bottom padding, subtracting the border height so the height of the input is consistent with buttons and dropdowns that use the same spacing but draw their borders with pseudo elements
  --pf-c-form-control--inset--base: var(--pf-global--spacer--sm);
  --pf-c-form-control--PaddingTop: calc(var(--pf-global--spacer--form-element) - var(--pf-global--BorderWidth--sm));
  --pf-c-form-control--PaddingBottom: calc(var(--pf-global--spacer--form-element) - var(--pf-global--BorderWidth--sm));
  --pf-c-form-control--PaddingRight: var(--pf-c-form-control--inset--base);
  --pf-c-form-control--PaddingLeft: var(--pf-c-form-control--inset--base);

  // hover
  --pf-c-form-control--hover--BorderBottomColor: var(--pf-global--primary-color--100);

  // focus
  --pf-c-form-control--focus--BorderBottomWidth: var(--pf-global--BorderWidth--md);
  --pf-c-form-control--focus--PaddingBottom: calc(var(--pf-global--spacer--form-element) - var(--pf-c-form-control--focus--BorderBottomWidth));
  --pf-c-form-control--focus--BorderBottomColor: var(--pf-global--primary-color--100);

  // expanded
  --pf-c-form-control--m-expanded--BorderBottomWidth: var(--pf-global--BorderWidth--md);
  --pf-c-form-control--m-expanded--PaddingBottom: calc(var(--pf-global--spacer--form-element) - var(--pf-c-form-control--focus--BorderBottomWidth));
  --pf-c-form-control--m-expanded--BorderBottomColor: var(--pf-global--primary-color--100);

  // input placeholder style
  --pf-c-form-control--placeholder--Color: var(--pf-global--Color--dark-200);
  --pf-c-form-control--placeholder--child--Color: var(--pf-global--Color--100);

  // input disabled style
  --pf-c-form-control--disabled--Color: var(--pf-global--disabled-color--100);
  --pf-c-form-control--disabled--BackgroundColor: var(--pf-global--disabled-color--300);
  --pf-c-form-control--disabled--BorderColor: transparent;

  // input readonly style
  --pf-c-form-control--readonly--BackgroundColor: var(--pf-global--disabled-color--300);
  --pf-c-form-control--readonly--hover--BorderBottomColor: var(--pf-global--BorderColor--200);
  --pf-c-form-control--readonly--focus--PaddingBottom: calc(var(--pf-global--spacer--form-element) - var(--pf-global--BorderWidth--sm));
  --pf-c-form-control--readonly--focus--BorderBottomWidth: var(--pf-global--BorderWidth--sm);
  --pf-c-form-control--readonly--focus--BorderBottomColor: var(--pf-global--BorderColor--200);

  // input readonly plain style
  --pf-c-form-control--readonly--m-plain--BackgroundColor: transparent;
  --pf-c-form-control--readonly--m-plain--inset--base: 0;

  // Input m-success -- rename vars to m-success in breaking change release
  --pf-c-form-control--success--BorderBottomWidth: var(--pf-global--BorderWidth--md);
  --pf-c-form-control--success--PaddingBottom: calc(var(--pf-global--spacer--form-element) - var(--pf-c-form-control--success--BorderBottomWidth));
  --pf-c-form-control--success--BorderBottomColor: var(--pf-global--success-color--100);

  // Input m-warning
  --pf-c-form-control--m-warning--BorderBottomWidth: var(--pf-global--BorderWidth--md);
  --pf-c-form-control--m-warning--PaddingBottom: calc(var(--pf-global--spacer--form-element) - var(--pf-c-form-control--m-warning--BorderBottomWidth));
  --pf-c-form-control--m-warning--BorderBottomColor: var(--pf-global--warning-color--100);

  // Input invalid
  --pf-c-form-control--invalid--BorderBottomWidth: var(--pf-global--BorderWidth--md);
  --pf-c-form-control--invalid--PaddingBottom: calc(var(--pf-global--spacer--form-element) - var(--pf-c-form-control--invalid--BorderBottomWidth));
  --pf-c-form-control--invalid--BorderBottomColor: var(--pf-global--danger-color--100);

  // Select
  --pf-c-form-control--select--PaddingRight: calc(var(--pf-global--spacer--lg) + var(--pf-c-form-control--BorderWidth) + var(--pf-c-form-control--BorderWidth));
  --pf-c-form-control--select--PaddingLeft: calc(var(--pf-global--spacer--sm) - var(--pf-c-form-control--BorderWidth));
  --pf-c-form-control--select--BackgroundPositionX: calc(100% - var(--pf-global--spacer--md) + 1px);

  // Textarea
  --pf-c-form-control--textarea--Width: var(--pf-c-form-control--Width);
  --pf-c-form-control--textarea--Height: auto;

  // This component always needs to be light
  @include pf-t-light("--pf-c-form-control--Color");

  position: relative;
  width: var(--pf-c-form-control--Width);
  padding: var(--pf-c-form-control--PaddingTop) var(--pf-c-form-control--PaddingRight) var(--pf-c-form-control--PaddingBottom) var(--pf-c-form-control--PaddingLeft);
  font-size: var(--pf-c-form-control--FontSize);
  line-height: var(--pf-c-form-control--LineHeight);
  background-color: var(--pf-c-form-control--BackgroundColor);
  border: var(--pf-c-form-control--BorderWidth) solid;
  border-color: var(--pf-c-form-control--BorderTopColor) var(--pf-c-form-control--BorderRightColor) var(--pf-c-form-control--BorderBottomColor) var(--pf-c-form-control--BorderLeftColor);
  border-radius: var(--pf-c-form-control--BorderRadius);
  // stylelint-disable
  -moz-appearance: none;
  -webkit-appearance: none;
  // stylelint-enable

  &::placeholder {
    color: var(--pf-c-form-control--placeholder--Color); // update to set --pf-c-form-control--Color in breaking change - also look for any other place to do that in this component
  }

  &:not(textarea) {
    height: var(--pf-c-form-control--Height);

    // truncate overflow text
    text-overflow: ellipsis;
  }

  &[readonly] {
    background-color: var(--pf-c-form-control--readonly--BackgroundColor);

    // stylelint-disable selector-not-notation
    // update to single :not() in breaking change
    &:not(.pf-m-success):not([aria-invalid="true"]) {
      &:hover {
        --pf-c-form-control--BorderBottomColor: var(--pf-c-form-control--readonly--hover--BorderBottomColor);
      }

      &:focus {
        --pf-c-form-control--focus--PaddingBottom: var(--pf-c-form-control--readonly--focus--PaddingBottom);
        --pf-c-form-control--focus--BorderBottomWidth: var(--pf-c-form-control--readonly--focus--BorderBottomWidth);
        --pf-c-form-control--focus--BorderBottomColor: var(--pf-c-form-control--readonly--focus--BorderBottomColor);
      }
    }

    &.pf-m-plain {
      --pf-c-form-control--readonly--BackgroundColor: var(--pf-c-form-control--readonly--m-plain--BackgroundColor);
      --pf-c-form-control--inset--base: var(--pf-c-form-control--readonly--m-plain--inset--base);

      border-color: transparent;
    }
  }

  &:hover {
    --pf-c-form-control--BorderBottomColor: var(--pf-c-form-control--hover--BorderBottomColor);
  }

  &:focus {
    --pf-c-form-control--BorderBottomColor: var(--pf-c-form-control--focus--BorderBottomColor);

    padding-bottom: var(--pf-c-form-control--focus--PaddingBottom); // Can't redefine --pf-c-form-control--PaddingBottom b/c the hover padding bottom uses the focus padding var to compute it's padding
    border-bottom-width: var(--pf-c-form-control--focus--BorderBottomWidth);
  }

  &.pf-m-expanded {
    --pf-c-form-control--BorderBottomColor: var(--pf-c-form-control--m-expanded--BorderBottomColor);

    padding-bottom: var(--pf-c-form-control--m-expanded--PaddingBottom); // Can't redefine --pf-c-form-control--PaddingBottom b/c the hover padding bottom uses the focus padding var to compute it's padding
    border-bottom-width: var(--pf-c-form-control--m-expanded--BorderBottomWidth);
  }

  &:disabled {
    --pf-c-form-control--BackgroundColor: var(--pf-c-form-control--disabled--BackgroundColor);

    color: var(--pf-c-form-control--disabled--Color);
    cursor: not-allowed;
    border-color: var(--pf-c-form-control--disabled--BorderColor);
  }

  &[aria-invalid="true"] {
    --pf-c-form-control--BorderBottomColor: var(--pf-c-form-control--invalid--BorderBottomColor);

    padding-bottom: var(--pf-c-form-control--invalid--PaddingBottom); // Can't redefine --pf-c-form-control--PaddingBottom b/c the hover padding bottom uses the focus padding var to compute it's padding
    border-bottom-width: var(--pf-c-form-control--invalid--BorderBottomWidth);
  }

  &.pf-m-success {
    --pf-c-form-control--BorderBottomColor: var(--pf-c-form-control--success--BorderBottomColor);

    padding-bottom: var(--pf-c-form-control--success--PaddingBottom); // Can't redefine --pf-c-form-control--PaddingBottom b/c the hover padding bottom uses the focus padding var to compute it's padding
    border-bottom-width: var(--pf-c-form-control--success--BorderBottomWidth);
  }

  &.pf-m-warning {
    --pf-c-form-control--BorderBottomColor: var(--pf-c-form-control--m-warning--BorderBottomColor);

    padding-bottom: var(--pf-c-form-control--m-warning--PaddingBottom); // Can't redefine --pf-c-form-control--PaddingBottom b/c the hover padding bottom uses the focus padding var to compute it's padding
    border-bottom-width: var(--pf-c-form-control--m-warning--BorderBottomWidth);
  }

  // Wrapper to style a select input
  // Replace with &:has(select) when there is enough support
  &.pf-c-form-control-select {
    position: relative;
    cursor: pointer;

    &::after {
      position: absolute;
      top: 50%;
      left: var(--pf-c-form-control--select--BackgroundPositionX);
      width: 0;
      height: 0;
      margin-top: var(--pf-c-form-control--BorderWidth);
      pointer-events: none;
      content: "";
      border-top: 6px solid var(--pf-c-form-control--Color);
      border-right: 5px solid transparent;
      border-left: 5px solid transparent;
      transform: translate(-100%, -50%);
    }

    &.pf-m-placeholder select {
      --pf-c-form-control--Color: var(--pf-c-form-control--placeholder--Color);

      &:disabled {
        --pf-c-form-control--BackgroundColor: var(--pf-c-form-control--disabled--BackgroundColor);
        
        color: revert;
      }
    }
  }

  & select {
    --pf-c-form-control--PaddingRight: var(--pf-c-form-control--select--PaddingRight);
    --pf-c-form-control--PaddingLeft: var(--pf-c-form-control--select--PaddingLeft);

    position: absolute;
    inset: 0;

    // stylelint-disable
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    // stylelint-enable
  }

  @at-root textarea#{&} {
    width: var(--pf-c-form-control--textarea--Width);
    height: var(--pf-c-form-control--textarea--Height);
    vertical-align: bottom;
  }

  &.pf-m-resize-vertical {
    resize: vertical;
  }

  &.pf-m-resize-horizontal {
    resize: horizontal;
  }
}

// stylelint-disable no-invalid-position-at-import-rule
@import "themes/dark/form-control";

@include pf-theme-dark {
  @include pf-theme-dark-form-control;
}
