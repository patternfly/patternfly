/// Resets list.
/// @group mixins
/// @moduleType mixin
@mixin list-reset {
  padding-left: 0;
  list-style: none;
}

/// Base for all of the layout mixins.
/// @group mixins
/// @moduleType mixin
@mixin Layout {
  box-sizing: border-box;
  display: grid;
  // padding: 0;
  margin: 0;

  > *,
  > *::before,
  > *::after {
    box-sizing: border-box;
    // padding: 0;
    margin: 0;
  }
}

/// Positions the children out of the flow of it's current context.
/// @group mixins
/// @moduleType mixin
@mixin BreakAwayLayout {
  @include Layout;
  position: fixed;
  top: 0;
  left: 0;
}

/// Centers a single child horizontally and vertically.
/// @group mixins
/// @moduleType mixin
@mixin BullseyeLayout {
  @include Layout;
  display: flex;
  align-items: center;
  justify-content: center;
  & > *:not(:first-child) {
    display: none;
  }
}

/// Positions the children horizontally, and controls the width of the children.
/// @group mixins
/// @moduleType mixin
/// @parameter {Length} $maximum-width [1280px] the maximum width of the container
@mixin ContainerLayout($maximum-width: 1280px) {
  @include Layout;
  grid-template: auto / 100%;
  justify-items: center;

  & > * {
    max-width: $maximum-width;
  }
}

/// Positions children on the same axis, and centers those children on the axis.
/// @group mixins
/// @moduleType mixin
@mixin LevelLayout {
  @include Layout;
  grid-template: 1fr / auto;
  grid-auto-flow: column;
  grid-auto-columns: auto;
  align-items: center;
}

/// Layers the children over one another.
/// @group mixins
/// @moduleType mixin
@mixin PileLayout {
  @include Layout;
}

/// Positions the children on the same axis.
/// @group mixins
/// @moduleType mixin
@mixin SplitLayout {
  @include Layout;
  grid-template: 1fr / auto;
  grid-auto-flow: column;
  grid-auto-columns: auto;
}

/// Positions children one after the other vertically.
/// @group mixins
/// @moduleType mixin
@mixin StackLayout {
  @include Layout;
}

/// Positions children on the same row, but allows them to be place on the next row if space doesn't permit. The children have controlled dimensions.
/// @group mixins
/// @moduleType mixin
/// @parameter {Number} $columns [5] the number of columns in the tile-board (default - 5)
@mixin TileBoardLayout($columns: 5) {
  @include Layout;
  grid-template-columns: repeat($columns, 1fr);
}


/// Button variants
/// @group mixins
/// @moduleType mixin


@mixin pf-button-variant($background, $color, $border, $hover-background, $hover-border: $hover-background, $active-background: darken($background, 10%), $active-border: $active-background) {
  color: $color;
  background-color: $background;
  border-color: $border;

  &:hover,
  &:focus,
  &.pf-is-focus {
    color: pf-color-yiq($hover-background);
    background-color: $hover-background;
    border-color: $hover-border;
  }

  &:focus,
  &.pf-is-focus {
    outline: 0;
    box-shadow: 0 0 0 .2rem rgba($border, .5);
  }

  // Disabled comes first so active can properly restyle
  &.pf-is-disabled,
  &:disabled {
    color: pf-color-yiq($background);
    background-color: $background;
    border-color: $border;
    opacity: .5;
  }
}
